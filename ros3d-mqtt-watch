#!/usr/bin/env python2
#
# Copyright (c) 2015, Open-RnD Sp. z o.o.  All rights reserved.
#

from __future__ import absolute_import, print_function
import argparse
import paho.mqtt.client as mqtt
import logging
import json
from pprint import pprint


def parse_arguments():
    default_host = 'localhost'
    default_port = 1883
    default_timeout = 60
    default_topic = '/parameters/#'

    parser = argparse.ArgumentParser(description='Ros3D MQTT notification watcher')
    parser.add_argument('--mqtt-host',
                        help='Broker host address, default: {}'.format(default_host),
                        default=default_host)
    parser.add_argument('--mqtt-port',
                        help='Broker port, default: {}'.format(default_port),
                        default=default_port, type=int)
    parser.add_argument('--mqtt-keepalive',
                        help='Keepalive timeout, default: {}'.format(default_timeout),
                        default=default_timeout, type=int)
    parser.add_argument('--topic',
                        help='Topic to subscribe to, default: {}'.format(default_topic),
                        default=default_topic)
    return parser.parse_args()


def on_connect(client, opts, rc):
    logging.info('connected to broker: %s', mqtt.connack_string(rc))

    topic = opts.topic
    if not topic:
        topic = '/#'

    logging.info('subscribing to topic: %s', topic)
    client.subscribe(topic)


def on_message(client, _, message):
    logging.debug('message from topic: %s', message.topic)

    # we're expecting a JSON so this should be ok
    try:
        pprint(json.loads(message.payload))
    except ValueError:
        logging.exception('invalid JSON in message payload')
        logging.error('offending message: %s', message.payload)


def on_disconnect(client, _, rc):
    logging.error('disconnected from broker: %s', mqtt.connack_string(rc))


def main(opts):
    client = mqtt.Client(userdata=opts)
    client.on_connect = on_connect
    client.on_message = on_message
    client.on_disconnect = on_disconnect

    logging.info('connecting to: %s:%d keepalive %d',
                 opts.mqtt_host, opts.mqtt_port, opts.mqtt_keepalive)

    client.connect(opts.mqtt_host, opts.mqtt_port,
                   opts.mqtt_keepalive)
    client.loop_forever()


if __name__ == '__main__':

    opts = parse_arguments()

    logging.basicConfig(level=logging.DEBUG)

    main(opts)
